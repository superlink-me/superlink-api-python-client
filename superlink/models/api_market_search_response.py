# coding: utf-8

"""
    Superlink

    API for Superlink

    The version of the OpenAPI document: v0.3.3
    Contact: support@superlink.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from superlink.models.api_market_listing import ApiMarketListing

class ApiMarketSearchResponse(BaseModel):
    """
    ApiMarketSearchResponse
    """
    market_listings: Optional[conlist(ApiMarketListing)] = Field(None, alias="marketListings")
    __properties = ["marketListings"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiMarketSearchResponse:
        """Create an instance of ApiMarketSearchResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in market_listings (list)
        _items = []
        if self.market_listings:
            for _item in self.market_listings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['marketListings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiMarketSearchResponse:
        """Create an instance of ApiMarketSearchResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiMarketSearchResponse.parse_obj(obj)

        _obj = ApiMarketSearchResponse.parse_obj({
            "market_listings": [ApiMarketListing.from_dict(_item) for _item in obj.get("marketListings")] if obj.get("marketListings") is not None else None
        })
        return _obj


