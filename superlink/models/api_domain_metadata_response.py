# coding: utf-8

"""
    Superlink

    API for Superlink

    The version of the OpenAPI document: v0.3.26
    Contact: support@superlink.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from superlink.models.api_domain_metadata_attribute import ApiDomainMetadataAttribute
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ApiDomainMetadataResponse(BaseModel):
    """
    ApiDomainMetadataResponse
    """
    animation_url: Optional[StrictStr] = None
    attributes: Optional[List[ApiDomainMetadataAttribute]] = None
    avatar: Optional[StrictStr] = None
    background_color: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    external_url: Optional[StrictStr] = None
    image: Optional[StrictStr] = None
    image_url: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    namehash: Optional[StrictStr] = None
    token_id: Optional[StrictStr] = Field(default=None, alias="tokenId")
    __properties: ClassVar[List[str]] = ["animation_url", "attributes", "avatar", "background_color", "description", "external_url", "image", "image_url", "name", "namehash", "tokenId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ApiDomainMetadataResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item in self.attributes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of ApiDomainMetadataResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "animation_url": obj.get("animation_url"),
            "attributes": [ApiDomainMetadataAttribute.from_dict(_item) for _item in obj.get("attributes")] if obj.get("attributes") is not None else None,
            "avatar": obj.get("avatar"),
            "background_color": obj.get("background_color"),
            "description": obj.get("description"),
            "external_url": obj.get("external_url"),
            "image": obj.get("image"),
            "image_url": obj.get("image_url"),
            "name": obj.get("name"),
            "namehash": obj.get("namehash"),
            "tokenId": obj.get("tokenId")
        })
        return _obj


