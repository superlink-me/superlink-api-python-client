# coding: utf-8

"""
    Superlink

    API for Superlink  # noqa: E501

    The version of the OpenAPI document: v0.1.16
    Contact: support@superlink.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ApiDomainMetadataResponse(BaseModel):
    """
    ApiDomainMetadataResponse
    """
    avatar: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    external_url: Optional[StrictStr] = None
    image: Optional[StrictStr] = None
    image_url: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    namehash: Optional[StrictStr] = None
    token_id: Optional[StrictStr] = Field(None, alias="tokenId")
    __properties = ["avatar", "description", "external_url", "image", "image_url", "name", "namehash", "tokenId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiDomainMetadataResponse:
        """Create an instance of ApiDomainMetadataResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiDomainMetadataResponse:
        """Create an instance of ApiDomainMetadataResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiDomainMetadataResponse.parse_obj(obj)

        _obj = ApiDomainMetadataResponse.parse_obj({
            "avatar": obj.get("avatar"),
            "description": obj.get("description"),
            "external_url": obj.get("external_url"),
            "image": obj.get("image"),
            "image_url": obj.get("image_url"),
            "name": obj.get("name"),
            "namehash": obj.get("namehash"),
            "token_id": obj.get("tokenId")
        })
        return _obj

